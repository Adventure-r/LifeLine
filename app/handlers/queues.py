"""
Queue management handlers
"""

from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from loguru import logger
from datetime import datetime, date, timedelta

from app.database.database import get_db
from app.database.crud import queue_crud, user_crud, notification_crud
from app.database.models import UserRole
from app.keyboards.inline import (
    get_queues_keyboard, get_queue_management_keyboard,
    get_queue_actions_keyboard, get_queue_details_keyboard
)
from app.keyboards.reply import get_main_menu_keyboard
from app.utils.decorators import require_role, require_auth
from app.states.states import QueueStates
from app.services.notification_service import NotificationService

router = Router()


@router.message(F.text == "üèÉ‚Äç‚ôÇÔ∏è –û—á–µ—Ä–µ–¥—å –Ω–∞ –∑–∞—â–∏—Ç—É")
@require_auth
async def show_queues(message: types.Message, user):
    """Show available queues"""
    if not user.group_id:
        await message.answer("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ.")
        return
    
    try:
        async for db in get_db():
            queues = await queue_crud.get_group_queues(db, user.group_id)
            
            if not queues:
                await message.answer(
                    "üèÉ‚Äç‚ôÇÔ∏è –í –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –æ—á–µ—Ä–µ–¥–µ–π –Ω–∞ –∑–∞—â–∏—Ç—É.",
                    reply_markup=get_queues_keyboard(user.role, has_queues=False)
                )
                return
            
            queues_text = f"üèÉ‚Äç‚ôÇÔ∏è –û—á–µ—Ä–µ–¥–∏ –Ω–∞ –∑–∞—â–∏—Ç—É:\n\n"
            
            for i, queue in enumerate(queues, 1):
                participants_count = len(queue.entries)
                
                queues_text += f"{i}. {queue.title}\n"
                
                if queue.description:
                    # Show first 100 characters
                    desc = queue.description[:100]
                    if len(queue.description) > 100:
                        desc += "..."
                    queues_text += f"   üìÑ {desc}\n"
                
                queues_text += f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}"
                if queue.max_participants:
                    queues_text += f"/{queue.max_participants}"
                queues_text += "\n"
                
                if queue.queue_date:
                    date_str = queue.queue_date.strftime("%d.%m.%Y")
                    queues_text += f"   üìÖ –î–∞—Ç–∞: {date_str}"
                    
                    if queue.start_time:
                        queues_text += f" –≤ {queue.start_time}"
                    queues_text += "\n"
                
                # Check if user is in this queue
                user_entry = next((entry for entry in queue.entries if entry.user_id == user.id), None)
                if user_entry:
                    queues_text += f"   üìç –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: {user_entry.position}\n"
                elif queue.max_participants and participants_count >= queue.max_participants:
                    queues_text += "   ‚ùå –û—á–µ—Ä–µ–¥—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞\n"
                else:
                    queues_text += "   üìù –ú–æ–∂–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è\n"
                
                queues_text += "\n"
            
            await message.answer(
                queues_text,
                reply_markup=get_queues_keyboard(user.role, has_queues=True)
            )
            
    except Exception as e:
        logger.error(f"Error showing queues: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—á–µ—Ä–µ–¥–µ–π.")


@router.message(F.text == "üèÉ‚Äç‚ôÇÔ∏è –û—á–µ—Ä–µ–¥–∏")
@require_role(UserRole.GROUP_LEADER, UserRole.ASSISTANT)
async def manage_queues(message: types.Message, user):
    """Show queue management for group leaders"""
    if not user.group_id:
        await message.answer("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ.")
        return
    
    try:
        async for db in get_db():
            queues = await queue_crud.get_group_queues(db, user.group_id)
            
            queues_text = f"üèÉ‚Äç‚ôÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—è–º–∏ –≥—Ä—É–ø–ø—ã ¬´{user.group.name}¬ª\n\n"
            
            if not queues:
                queues_text += "–û—á–µ—Ä–µ–¥–µ–π –ø–æ–∫–∞ –Ω–µ—Ç."
            else:
                queues_text += f"–í—Å–µ–≥–æ –æ—á–µ—Ä–µ–¥–µ–π: {len(queues)}\n\n"
                
                for i, queue in enumerate(queues, 1):
                    participants_count = len(queue.entries)
                    queues_text += f"{i}. {queue.title}\n"
                    queues_text += f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}"
                    
                    if queue.max_participants:
                        queues_text += f"/{queue.max_participants}"
                    queues_text += "\n"
                    
                    if queue.queue_date:
                        date_str = queue.queue_date.strftime("%d.%m.%Y")
                        queues_text += f"   üìÖ {date_str}"
                        if queue.start_time:
                            queues_text += f" –≤ {queue.start_time}"
                        queues_text += "\n"
                    
                    queues_text += "\n"
            
            await message.answer(
                queues_text,
                reply_markup=get_queue_management_keyboard()
            )
            
    except Exception as e:
        logger.error(f"Error showing queue management: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.callback_query(F.data == "create_queue")
@require_role(UserRole.GROUP_LEADER, UserRole.ASSISTANT)
async def create_queue_start(callback: types.CallbackQuery, state: FSMContext, user):
    """Start queue creation"""
    await callback.message.edit_text(
        "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –æ—á–µ—Ä–µ–¥–∏\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏:"
    )
    await state.set_state(QueueStates.waiting_for_title)


@router.message(QueueStates.waiting_for_title)
@require_role(UserRole.GROUP_LEADER, UserRole.ASSISTANT)
async def process_queue_title(message: types.Message, state: FSMContext, user):
    """Process queue title"""
    try:
        title = message.text.strip()
        
        if len(title) < 3:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
            return
        
        if len(title) > 255:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 255 —Å–∏–º–≤–æ–ª–æ–≤).")
            return
        
        await state.update_data(title=title)
        
        await message.answer(
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"
        )
        await state.set_state(QueueStates.waiting_for_description)
        
    except Exception as e:
        logger.error(f"Error processing queue title: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.message(QueueStates.waiting_for_description)
@require_role(UserRole.GROUP_LEADER, UserRole.ASSISTANT)
async def process_queue_description(message: types.Message, state: FSMContext, user):
    """Process queue description"""
    try:
        description = None
        if message.text.strip() != "/skip":
            description = message.text.strip()
            if len(description) > 1000:
                await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤).")
                return
        
        await state.update_data(description=description)
        
        await message.answer(
            "üìä –£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–µ—Ä–µ–¥–∏:\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏:"
        )
        await state.set_state(QueueStates.waiting_for_max_participants)
        
    except Exception as e:
        logger.error(f"Error processing queue description: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.message(QueueStates.waiting_for_max_participants)
@require_role(UserRole.GROUP_LEADER, UserRole.ASSISTANT)
async def process_max_participants(message: types.Message, state: FSMContext, user):
    """Process maximum participants"""
    try:
        max_participants = None
        
        if message.text.strip() != "/skip":
            try:
                max_participants = int(message.text.strip())
                
                if max_participants < 1 or max_participants > 100:
                    await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100.")
                    return
                    
            except ValueError:
                await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ /skip.")
                return
        
        await state.update_data(max_participants=max_participants)
        
        await message.answer(
            "üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –æ—á–µ—Ä–µ–¥–∏:\n\n"
            "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞"
        )
        await state.set_state(QueueStates.waiting_for_date)
        
    except Exception as e:
        logger.error(f"Error processing max participants: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.message(QueueStates.waiting_for_date)
@require_role(UserRole.GROUP_LEADER, UserRole.ASSISTANT)
async def process_queue_date(message: types.Message, state: FSMContext, user):
    """Process queue date"""
    try:
        queue_date = None
        
        if message.text.strip() != "/skip":
            try:
                queue_date = datetime.strptime(message.text.strip(), "%d.%m.%Y").date()
                
                if queue_date < date.today():
                    await message.answer("‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º.")
                    return
                    
            except ValueError:
                await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì"
                )
                return
        
        await state.update_data(queue_date=queue_date)
        
        if queue_date:
            await message.answer(
                f"‚úÖ –î–∞—Ç–∞: {queue_date.strftime('%d.%m.%Y')}\n\n"
                "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ—á–µ—Ä–µ–¥–∏:\n\n"
                "–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 09:00\n"
                "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞"
            )
            await state.set_state(QueueStates.waiting_for_start_time)
        else:
            await finish_queue_creation(message, state, user)
        
    except Exception as e:
        logger.error(f"Error processing queue date: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.message(QueueStates.waiting_for_start_time)
@require_role(UserRole.GROUP_LEADER, UserRole.ASSISTANT)
async def process_start_time(message: types.Message, state: FSMContext, user):
    """Process queue start time"""
    try:
        start_time = None
        
        if message.text.strip() != "/skip":
            try:
                # Validate time format
                datetime.strptime(message.text.strip(), "%H:%M")
                start_time = message.text.strip()
            except ValueError:
                await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú"
                )
                return
        
        await state.update_data(start_time=start_time)
        await finish_queue_creation(message, state, user)
        
    except Exception as e:
        logger.error(f"Error processing start time: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


async def finish_queue_creation(message: types.Message, state: FSMContext, user):
    """Finish queue creation"""
    try:
        data = await state.get_data()
        
        async for db in get_db():
            # Create queue
            queue = await queue_crud.create(
                db,
                title=data['title'],
                description=data.get('description'),
                group_id=user.group_id,
                max_participants=data.get('max_participants'),
                queue_date=data.get('queue_date'),
                start_time=data.get('start_time')
            )
            
            # Build confirmation message
            confirmation_text = f"‚úÖ –û—á–µ—Ä–µ–¥—å ¬´{queue.title}¬ª —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            
            if queue.max_participants:
                confirmation_text += f"üìä –ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {queue.max_participants}\n"
            else:
                confirmation_text += "üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ\n"
            
            if queue.queue_date:
                confirmation_text += f"üìÖ –î–∞—Ç–∞: {queue.queue_date.strftime('%d.%m.%Y')}\n"
            
            if queue.start_time:
                confirmation_text += f"üïê –í—Ä–µ–º—è: {queue.start_time}\n"
            
            confirmation_text += "\nüì¢ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –æ—á–µ—Ä–µ–¥–∏."
            
            await message.answer(
                confirmation_text,
                reply_markup=get_main_menu_keyboard(user.role)
            )
            
            # Notify group members
            await notify_group_about_queue(db, queue, user)
            
            logger.info(f"User {user.full_name} created queue '{queue.title}' in group {user.group.name}")
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error finishing queue creation: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏.")
        await state.clear()


async def notify_group_about_queue(db, queue, creator):
    """Send notifications about new queue"""
    try:
        members = await user_crud.get_users_by_group(db, queue.group_id)
        notification_service = NotificationService()
        
        for member in members:
            if member.id != creator.id and member.notifications_enabled:
                message = f"–í –≥—Ä—É–ø–ø–µ –æ—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è –æ—á–µ—Ä–µ–¥—å: {queue.title}"
                
                if queue.queue_date:
                    message += f"\nüìÖ {queue.queue_date.strftime('%d.%m.%Y')}"
                    
                if queue.start_time:
                    message += f" –≤ {queue.start_time}"
                
                await notification_service.send_immediate_notification(
                    member.telegram_id,
                    "üèÉ‚Äç‚ôÇÔ∏è –ù–æ–≤–∞—è –æ—á–µ—Ä–µ–¥—å",
                    message
                )
    except Exception as e:
        logger.error(f"Error notifying group about queue: {e}")


@router.callback_query(F.data == "join_queue_menu")
@require_auth
async def join_queue_menu(callback: types.CallbackQuery, user):
    """Show queue joining menu"""
    try:
        async for db in get_db():
            queues = await queue_crud.get_group_queues(db, user.group_id)
            
            # Filter available queues
            available_queues = []
            for queue in queues:
                # Check if user is already in queue
                user_in_queue = any(entry.user_id == user.id for entry in queue.entries)
                if user_in_queue:
                    continue
                
                # Check if queue is full
                if queue.max_participants and len(queue.entries) >= queue.max_participants:
                    continue
                
                available_queues.append(queue)
            
            if not available_queues:
                await callback.message.edit_text(
                    "üèÉ‚Äç‚ôÇÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.\n\n"
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤–æ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥—è—Ö\n"
                    "‚Ä¢ –í—Å–µ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"
                )
                return
            
            queues_text = "üèÉ‚Äç‚ôÇÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:\n\n"
            
            keyboard_buttons = []
            for i, queue in enumerate(available_queues):
                participants_count = len(queue.entries)
                
                queues_text += f"{i+1}. {queue.title}\n"
                queues_text += f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}"
                if queue.max_participants:
                    queues_text += f"/{queue.max_participants}"
                queues_text += "\n"
                
                if queue.queue_date:
                    date_str = queue.queue_date.strftime("%d.%m.%Y")
                    queues_text += f"   üìÖ {date_str}"
                    if queue.start_time:
                        queues_text += f" –≤ {queue.start_time}"
                    queues_text += "\n"
                
                queues_text += "\n"
                
                keyboard_buttons.append([
                    types.InlineKeyboardButton(
                        text=f"{i+1}. {queue.title[:30]}{'...' if len(queue.title) > 30 else ''}",
                        callback_data=f"join_queue:{queue.id}"
                    )
                ])
            
            keyboard_buttons.append([
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_queues")
            ])
            
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await callback.message.edit_text(queues_text, reply_markup=keyboard)
            
    except Exception as e:
        logger.error(f"Error showing join queue menu: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.callback_query(F.data.startswith("join_queue:"))
@require_auth
async def join_queue(callback: types.CallbackQuery, user):
    """Join a queue"""
    try:
        queue_id = callback.data.split(":")[1]
        
        async for db in get_db():
            queue = await queue_crud.get_by_id(db, queue_id)
            
            if not queue or queue.group_id != user.group_id:
                await callback.answer("‚ùå –û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            # Check if user is already in queue
            user_in_queue = any(entry.user_id == user.id for entry in queue.entries)
            if user_in_queue:
                await callback.answer("‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏.")
                return
            
            # Check if queue is full
            if queue.max_participants and len(queue.entries) >= queue.max_participants:
                await callback.answer("‚ùå –û—á–µ—Ä–µ–¥—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞.")
                return
            
            # Join queue
            entry = await queue_crud.join_queue(db, queue_id, user.id)
            
            if entry:
                await callback.message.edit_text(
                    f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –æ—á–µ—Ä–µ–¥–∏ ¬´{queue.title}¬ª!\n\n"
                    f"üìç –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: {entry.position}\n"
                    f"üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(queue.entries) + 1}"
                )
                
                logger.info(f"User {user.full_name} joined queue '{queue.title}' at position {entry.position}")
            else:
                await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –æ—á–µ—Ä–µ–¥–∏.")
            
    except Exception as e:
        logger.error(f"Error joining queue: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.callback_query(F.data == "my_queues")
@require_auth
async def show_my_queues(callback: types.CallbackQuery, user):
    """Show user's queues"""
    try:
        async for db in get_db():
            # Get all queues where user participates
            user_entries = await user_crud.get_user_queue_entries(db, user.id)
            
            if not user_entries:
                await callback.message.edit_text(
                    "üèÉ‚Äç‚ôÇÔ∏è –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏.",
                    reply_markup=get_queues_keyboard(user.role, has_queues=True)
                )
                return
            
            queues_text = "üèÉ‚Äç‚ôÇÔ∏è –í–∞—à–∏ –æ—á–µ—Ä–µ–¥–∏:\n\n"
            
            for entry in user_entries:
                queue = entry.queue
                queues_text += f"üìù {queue.title}\n"
                queues_text += f"üìç –ü–æ–∑–∏—Ü–∏—è: {entry.position}\n"
                
                if queue.queue_date:
                    date_str = queue.queue_date.strftime("%d.%m.%Y")
                    queues_text += f"üìÖ –î–∞—Ç–∞: {date_str}"
                    if queue.start_time:
                        queues_text += f" –≤ {queue.start_time}"
                    queues_text += "\n"
                
                if entry.notes:
                    queues_text += f"üìù –ó–∞–º–µ—Ç–∫–∏: {entry.notes}\n"
                
                queues_text += "\n"
            
            await callback.message.edit_text(
                queues_text,
                reply_markup=get_queues_keyboard(user.role, has_queues=True)
            )
            
    except Exception as e:
        logger.error(f"Error showing user's queues: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.callback_query(F.data.startswith("queue_details:"))
@require_auth
async def show_queue_details(callback: types.CallbackQuery, user):
    """Show detailed queue information"""
    try:
        queue_id = callback.data.split(":")[1]
        
        async for db in get_db():
            queue = await queue_crud.get_by_id(db, queue_id)
            
            if not queue or queue.group_id != user.group_id:
                await callback.answer("‚ùå –û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            # Build details message
            details_text = f"üìã –î–µ—Ç–∞–ª–∏ –æ—á–µ—Ä–µ–¥–∏\n\n"
            details_text += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {queue.title}\n"
            
            if queue.description:
                details_text += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {queue.description}\n"
            
            participants_count = len(queue.entries)
            details_text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}"
            if queue.max_participants:
                details_text += f"/{queue.max_participants}"
            details_text += "\n"
            
            if queue.queue_date:
                date_str = queue.queue_date.strftime("%d.%m.%Y")
                details_text += f"üìÖ –î–∞—Ç–∞: {date_str}\n"
            
            if queue.start_time:
                details_text += f"üïê –í—Ä–µ–º—è: {queue.start_time}\n"
            
            # Show queue positions
            if queue.entries:
                details_text += f"\nüìã –ü–æ—Ä—è–¥–æ–∫ –æ—á–µ—Ä–µ–¥–∏:\n"
                for entry in sorted(queue.entries, key=lambda x: x.position):
                    details_text += f"{entry.position}. {entry.user.full_name}"
                    if entry.notes:
                        details_text += f" ({entry.notes})"
                    details_text += "\n"
            
            keyboard = get_queue_details_keyboard(queue.id, user.role, user.id)
            
            await callback.message.edit_text(
                details_text,
                reply_markup=keyboard
            )
            
    except Exception as e:
        logger.error(f"Error showing queue details: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.callback_query(F.data.startswith("leave_queue:"))
@require_auth
async def leave_queue(callback: types.CallbackQuery, user):
    """Leave a queue"""
    try:
        queue_id = callback.data.split(":")[1]
        
        async for db in get_db():
            queue = await queue_crud.get_by_id(db, queue_id)
            
            if not queue or queue.group_id != user.group_id:
                await callback.answer("‚ùå –û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            # Leave queue
            success = await queue_crud.leave_queue(db, queue_id, user.id)
            
            if success:
                await callback.message.edit_text(
                    f"‚úÖ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –æ—á–µ—Ä–µ–¥—å ¬´{queue.title}¬ª.\n"
                    f"–ü–æ–∑–∏—Ü–∏–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã."
                )
                
                logger.info(f"User {user.full_name} left queue '{queue.title}'")
            else:
                await callback.answer("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏.")
            
    except Exception as e:
        logger.error(f"Error leaving queue: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.callback_query(F.data == "back_to_queues")
async def back_to_queues(callback: types.CallbackQuery):
    """Go back to queues menu"""
    from app.handlers.queues import show_queues
    await show_queues(callback.message, callback.from_user)
