"""
Group management handlers
"""

from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from loguru import logger
from datetime import datetime, timedelta

from app.database.database import get_db
from app.database.crud import user_crud, group_crud, invite_token_crud
from app.database.models import UserRole
from app.keyboards.inline import (
    get_group_management_keyboard, get_group_members_keyboard,
    get_member_actions_keyboard, get_invite_settings_keyboard
)
from app.keyboards.reply import get_main_menu_keyboard
from app.utils.decorators import require_role, require_auth
from app.states.states import GroupStates
from app.services.auth_service import AuthService

router = Router()


@router.message(Command("create_group"))
@require_auth
async def create_group_command(message: types.Message, state: FSMContext, user):
    """Start group creation process"""
    if user.role not in [UserRole.ADMIN, UserRole.GROUP_LEADER]:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return
    
    await message.answer(
        "üìö –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:"
    )
    await state.set_state(GroupStates.waiting_for_group_name)


@router.message(GroupStates.waiting_for_group_name)
@require_auth
async def process_group_name(message: types.Message, state: FSMContext, user):
    """Process group name"""
    try:
        group_name = message.text.strip()
        
        if len(group_name) < 3:
            await message.answer(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞."
            )
            return
        
        if len(group_name) > 100:
            await message.answer(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)."
            )
            return
        
        await state.update_data(group_name=group_name)
        
        await message.answer(
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: {group_name}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"
        )
        await state.set_state(GroupStates.waiting_for_group_description)
        
    except Exception as e:
        logger.error(f"Error processing group name: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@router.message(GroupStates.waiting_for_group_description)
@require_auth
async def process_group_description(message: types.Message, state: FSMContext, user):
    """Process group description"""
    try:
        data = await state.get_data()
        group_name = data.get('group_name')
        
        description = None
        if message.text.strip() != "/skip":
            description = message.text.strip()
            if len(description) > 500:
                await message.answer(
                    "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)."
                )
                return
        
        async for db in get_db():
            # Create group
            group = await group_crud.create_group(
                db,
                name=group_name,
                leader_id=user.id,
                description=description
            )
            
            # Update user role and group
            await user_crud.update(
                db, 
                user.id, 
                role=UserRole.GROUP_LEADER,
                group_id=group.id
            )
            
            success_text = (
                f"‚úÖ –ì—Ä—É–ø–ø–∞ ¬´{group_name}¬ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                f"–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã —Å—Ç–∞—Ä–æ—Å—Ç–æ–π –≥—Ä—É–ø–ø—ã.\n"
                f"ID –≥—Ä—É–ø–ø—ã: {group.id}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                f"‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (/invite)\n"
                f"‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è\n"
                f"‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –≥—Ä—É–ø–ø–æ–π"
            )
            
            await message.answer(
                success_text,
                reply_markup=get_main_menu_keyboard(UserRole.GROUP_LEADER)
            )
            
            logger.info(f"User {user.full_name} created group '{group_name}'")
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error creating group: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã.")
        await state.clear()


@router.message(F.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π")
@require_role(UserRole.GROUP_LEADER, UserRole.ASSISTANT)
async def manage_group(message: types.Message, user):
    """Show group management menu"""
    if not user.group:
        await message.answer("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ.")
        return
    
    async for db in get_db():
        group = await group_crud.get_with_members(db, user.group_id)
        if not group:
            await message.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        member_count = len(group.members)
        
        info_text = (
            f"üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π ¬´{group.name}¬ª\n\n"
            f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
            f"‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {member_count}\n"
            f"‚Ä¢ –°—Ç–∞—Ä–æ—Å—Ç–∞: {group.leader.full_name}\n"
        )
        
        if group.description:
            info_text += f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {group.description}\n"
        
        info_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        await message.answer(
            info_text,
            reply_markup=get_group_management_keyboard(user.role)
        )


@router.callback_query(F.data == "group_members")
@require_role(UserRole.GROUP_LEADER, UserRole.ASSISTANT)
async def show_group_members(callback: types.CallbackQuery, user):
    """Show group members"""
    try:
        if not user.group:
            await callback.answer("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ.")
            return
        
        async for db in get_db():
            members = await user_crud.get_users_by_group(db, user.group_id)
            
            if not members:
                await callback.message.edit_text(
                    "üë• –í –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
                )
                return
            
            members_text = f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã ({len(members)}):\n\n"
            
            # Group members by role
            leaders = [m for m in members if m.role == UserRole.GROUP_LEADER]
            assistants = [m for m in members if m.role == UserRole.ASSISTANT]
            regular_members = [m for m in members if m.role == UserRole.MEMBER]
            
            if leaders:
                members_text += "üëë –°—Ç–∞—Ä–æ—Å—Ç—ã:\n"
                for member in leaders:
                    members_text += f"‚Ä¢ {member.full_name}"
                    if member.username:
                        members_text += f" (@{member.username})"
                    members_text += "\n"
                members_text += "\n"
            
            if assistants:
                members_text += "ü§ù –ü–æ–º–æ—â–Ω–∏–∫–∏:\n"
                for member in assistants:
                    members_text += f"‚Ä¢ {member.full_name}"
                    if member.username:
                        members_text += f" (@{member.username})"
                    members_text += "\n"
                members_text += "\n"
            
            if regular_members:
                members_text += "üë§ –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n"
                for member in regular_members:
                    members_text += f"‚Ä¢ {member.full_name}"
                    if member.username:
                        members_text += f" (@{member.username})"
                    members_text += "\n"
            
            await callback.message.edit_text(
                members_text,
                reply_markup=get_group_members_keyboard(user.role)
            )
            
    except Exception as e:
        logger.error(f"Error showing group members: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.callback_query(F.data == "manage_member")
@require_role(UserRole.GROUP_LEADER)
async def manage_member_start(callback: types.CallbackQuery, state: FSMContext, user):
    """Start member management"""
    await callback.message.edit_text(
        "üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ username —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    )
    await state.set_state(GroupStates.selecting_member)


@router.message(GroupStates.selecting_member)
@require_role(UserRole.GROUP_LEADER)
async def select_member_to_manage(message: types.Message, state: FSMContext, user):
    """Select member to manage"""
    try:
        search_query = message.text.strip().lower()
        
        async for db in get_db():
            members = await user_crud.get_users_by_group(db, user.group_id)
            
            # Search for member
            found_members = []
            for member in members:
                if (search_query in member.full_name.lower() or 
                    (member.username and search_query in member.username.lower())):
                    found_members.append(member)
            
            if not found_members:
                await message.answer(
                    "‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –∏–ª–∏ username."
                )
                return
            
            if len(found_members) > 1:
                results_text = f"–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n"
                for i, member in enumerate(found_members, 1):
                    results_text += f"{i}. {member.full_name}"
                    if member.username:
                        results_text += f" (@{member.username})"
                    results_text += f" - {member.role.value}\n"
                
                results_text += "\n–£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."
                await message.answer(results_text)
                return
            
            # Found exactly one member
            member = found_members[0]
            
            if member.id == user.id:
                await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–∞–º–∏–º —Å–æ–±–æ–π.")
                await state.clear()
                return
            
            member_info = (
                f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫: {member.full_name}\n"
                f"Username: @{member.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"–†–æ–ª—å: {member.role.value}\n"
                f"–ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if member.is_active else '–ù–µ—Ç'}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            
            await message.answer(
                member_info,
                reply_markup=get_member_actions_keyboard(member.id, member.role)
            )
            
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error selecting member: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        await state.clear()


@router.callback_query(F.data.startswith("member_action:"))
@require_role(UserRole.GROUP_LEADER)
async def handle_member_action(callback: types.CallbackQuery, user):
    """Handle member management actions"""
    try:
        action, member_id = callback.data.split(":")[1], callback.data.split(":")[2]
        
        async for db in get_db():
            member = await user_crud.get_by_id(db, member_id)
            if not member or member.group_id != user.group_id:
                await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            if action == "make_assistant":
                await user_crud.update_role(db, member_id, UserRole.ASSISTANT)
                await callback.message.edit_text(
                    f"‚úÖ {member.full_name} –Ω–∞–∑–Ω–∞—á–µ–Ω –ø–æ–º–æ—â–Ω–∏–∫–æ–º —Å—Ç–∞—Ä–æ—Å—Ç—ã."
                )
                
            elif action == "remove_assistant":
                await user_crud.update_role(db, member_id, UserRole.MEMBER)
                await callback.message.edit_text(
                    f"‚úÖ {member.full_name} –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–º–æ—â–Ω–∏–∫–æ–º —Å—Ç–∞—Ä–æ—Å—Ç—ã."
                )
                
            elif action == "remove_member":
                await user_crud.update(db, member_id, group_id=None, role=UserRole.MEMBER)
                await callback.message.edit_text(
                    f"‚úÖ {member.full_name} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã."
                )
                
                # Notify removed member
                try:
                    from app.services.notification_service import NotificationService
                    notification_service = NotificationService()
                    await notification_service.send_immediate_notification(
                        member.telegram_id,
                        "‚ö†Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã",
                        f"–í—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –≥—Ä—É–ø–ø—ã ¬´{user.group.name}¬ª —Å—Ç–∞—Ä–æ—Å—Ç–æ–π."
                    )
                except Exception as e:
                    logger.error(f"Error notifying removed member: {e}")
            
            logger.info(f"Group leader {user.full_name} performed action {action} on {member.full_name}")
            
    except Exception as e:
        logger.error(f"Error handling member action: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.message(Command("invite"))
@require_role(UserRole.GROUP_LEADER, UserRole.ASSISTANT)
async def create_invite(message: types.Message, user):
    """Create invite link for group"""
    if not user.group:
        await message.answer("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ.")
        return
    
    await message.answer(
        "üîó –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:",
        reply_markup=get_invite_settings_keyboard()
    )


@router.callback_query(F.data.startswith("invite_settings:"))
@require_role(UserRole.GROUP_LEADER, UserRole.ASSISTANT)
async def process_invite_settings(callback: types.CallbackQuery, user):
    """Process invite settings"""
    try:
        settings = callback.data.split(":")[1]
        
        # Parse settings: format is "duration_uses" (e.g., "24_5" means 24 hours, 5 uses)
        parts = settings.split("_")
        duration_hours = int(parts[0])
        max_uses = int(parts[1]) if parts[1] != "unlimited" else None
        
        async for db in get_db():
            # Generate unique token
            token = AuthService.generate_invite_token()
            expires_at = datetime.now() + timedelta(hours=duration_hours)
            
            # Create invite
            invite = await invite_token_crud.create_invite(
                db,
                group_id=user.group_id,
                created_by=user.id,
                token=token,
                expires_at=expires_at,
                max_uses=max_uses
            )
            
            # Create invite link
            bot_username = (await callback.bot.get_me()).username
            invite_link = f"https://t.me/{bot_username}?start={token}"
            
            expires_text = expires_at.strftime("%d.%m.%Y –≤ %H:%M")
            uses_text = f"{max_uses} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π" if max_uses else "–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ"
            
            invite_text = (
                f"üîó –°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                f"–ì—Ä—É–ø–ø–∞: {user.group.name}\n"
                f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_text}\n"
                f"–ú–∞–∫—Å–∏–º—É–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {uses_text}\n\n"
                f"–°—Å—ã–ª–∫–∞:\n`{invite_link}`\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É —Ç–µ–º, –∫–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É."
            )
            
            await callback.message.edit_text(
                invite_text,
                parse_mode="Markdown"
            )
            
            logger.info(f"User {user.full_name} created invite for group {user.group.name}")
            
    except Exception as e:
        logger.error(f"Error creating invite: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.")


@router.callback_query(F.data == "group_settings")
@require_role(UserRole.GROUP_LEADER)
async def group_settings(callback: types.CallbackQuery, state: FSMContext, user):
    """Show group settings"""
    await callback.message.edit_text(
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã ¬´{user.group.name}¬ª\n\n"
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n\n"
        "1. –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã\n"
        "2. –û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã\n"
        "3. –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è (1-3):"
    )
    await state.set_state(GroupStates.selecting_setting)


@router.message(GroupStates.selecting_setting)
@require_role(UserRole.GROUP_LEADER)
async def handle_group_setting(message: types.Message, state: FSMContext, user):
    """Handle group setting selection"""
    try:
        choice = message.text.strip()
        
        if choice == "1":
            await message.answer(
                "üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã\n\n"
                f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {user.group.name}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
            )
            await state.set_state(GroupStates.changing_name)
            
        elif choice == "2":
            await message.answer(
                "üìÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã\n\n"
                f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {user.group.description or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ /clear –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):"
            )
            await state.set_state(GroupStates.changing_description)
            
        elif choice == "3":
            await message.answer(
                "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã\n\n"
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É?\n"
                "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n"
                "–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –±—É–¥—É—Ç –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –≥—Ä—É–ø–ø—ã.\n"
                "–í—Å–µ —Å–æ–±—ã—Ç–∏—è, —Ç–µ–º—ã –∏ –æ—á–µ—Ä–µ–¥–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.\n\n"
                "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Ç–æ—á–Ω–æ –∫–∞–∫ –æ–Ω–æ –Ω–∞–ø–∏—Å–∞–Ω–æ:",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete_group")]
                ])
            )
            await state.set_state(GroupStates.confirming_deletion)
            
        else:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ 3."
            )
            
    except Exception as e:
        logger.error(f"Error handling group setting: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        await state.clear()


@router.message(GroupStates.changing_name)
@require_role(UserRole.GROUP_LEADER)
async def change_group_name(message: types.Message, state: FSMContext, user):
    """Change group name"""
    try:
        new_name = message.text.strip()
        
        if len(new_name) < 3:
            await message.answer(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞."
            )
            return
        
        if len(new_name) > 100:
            await message.answer(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)."
            )
            return
        
        async for db in get_db():
            old_name = user.group.name
            await group_crud.update(db, user.group_id, name=new_name)
            
            await message.answer(
                f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑–º–µ–Ω–µ–Ω–æ!\n\n"
                f"–ë—ã–ª–æ: {old_name}\n"
                f"–°—Ç–∞–ª–æ: {new_name}"
            )
            
            logger.info(f"Group leader {user.full_name} changed group name from '{old_name}' to '{new_name}'")
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error changing group name: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è.")
        await state.clear()


@router.message(GroupStates.changing_description)
@require_role(UserRole.GROUP_LEADER)
async def change_group_description(message: types.Message, state: FSMContext, user):
    """Change group description"""
    try:
        new_description = None
        
        if message.text.strip() == "/clear":
            new_description = None
        else:
            new_description = message.text.strip()
            if len(new_description) > 500:
                await message.answer(
                    "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)."
                )
                return
        
        async for db in get_db():
            await group_crud.update(db, user.group_id, description=new_description)
            
            if new_description:
                await message.answer(
                    f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ:\n\n{new_description}"
                )
            else:
                await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —É–¥–∞–ª–µ–Ω–æ.")
            
            logger.info(f"Group leader {user.full_name} updated group description")
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error changing group description: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è.")
        await state.clear()


@router.callback_query(F.data == "cancel_delete_group")
async def cancel_delete_group(callback: types.CallbackQuery, state: FSMContext):
    """Cancel group deletion"""
    await callback.message.edit_text("‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()


@router.message(GroupStates.confirming_deletion)
@require_role(UserRole.GROUP_LEADER)
async def confirm_group_deletion(message: types.Message, state: FSMContext, user):
    """Confirm group deletion"""
    try:
        confirmation = message.text.strip()
        
        if confirmation != user.group.name:
            await message.answer(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ. –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
            )
            await state.clear()
            return
        
        async for db in get_db():
            group_name = user.group.name
            group_id = user.group_id
            
            # Get all group members
            members = await user_crud.get_users_by_group(db, group_id)
            
            # Remove all members from group
            for member in members:
                await user_crud.update(db, member.id, group_id=None, role=UserRole.MEMBER)
            
            # Deactivate group
            await group_crud.update(db, group_id, is_active=False)
            
            await message.answer(
                f"‚úÖ –ì—Ä—É–ø–ø–∞ ¬´{group_name}¬ª —É–¥–∞–ª–µ–Ω–∞.\n"
                f"–í—Å–µ {len(members)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –≥—Ä—É–ø–ø—ã.",
                reply_markup=get_main_menu_keyboard(UserRole.MEMBER)
            )
            
            # Notify all members
            try:
                from app.services.notification_service import NotificationService
                notification_service = NotificationService()
                
                for member in members:
                    if member.id != user.id:  # Don't notify the leader
                        await notification_service.send_immediate_notification(
                            member.telegram_id,
                            "‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ —É–¥–∞–ª–µ–Ω–∞",
                            f"–ì—Ä—É–ø–ø–∞ ¬´{group_name}¬ª –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–æ—Å—Ç–æ–π."
                        )
            except Exception as e:
                logger.error(f"Error notifying members about group deletion: {e}")
            
            logger.info(f"Group leader {user.full_name} deleted group '{group_name}'")
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error deleting group: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã.")
        await state.clear()
