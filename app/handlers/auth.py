"""
Authentication and registration handlers
"""

from aiogram import Router, F, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from loguru import logger

from app.database.database import get_db
from app.database.crud import user_crud, group_crud, invite_token_crud
from app.states.states import RegistrationStates
from app.keyboards.inline import get_groups_keyboard, get_confirmation_keyboard
from app.keyboards.reply import get_main_menu_keyboard
from app.services.auth_service import AuthService
from app.utils.decorators import require_auth
from app.database.models import UserRole

router = Router()


@router.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    """
    Handle /start command with optional invite token
    """
    try:
        async for db in get_db():
            # Check if user already exists
            user = await user_crud.get_by_telegram_id(db, message.from_user.id)
            
            # Parse invite token from command args
            args = message.text.split()
            invite_token = args[1] if len(args) > 1 else None
            
            if user:
                # Existing user
                if user.group_id:
                    await message.answer(
                        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user.full_name}!\n"
                        f"–í–∞—à–∞ –≥—Ä—É–ø–ø–∞: {user.group.name if user.group else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}",
                        reply_markup=get_main_menu_keyboard(user.role)
                    )
                else:
                    await message.answer(
                        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.full_name}!\n"
                        "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ. –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:",
                        reply_markup=await get_groups_keyboard(db)
                    )
                return
            
            if invite_token:
                # Registration with invite token
                await handle_invite_registration(message, state, invite_token, db)
            else:
                # Regular registration
                await start_registration(message, state)
                
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def handle_invite_registration(message: types.Message, state: FSMContext, 
                                   token: str, db):
    """Handle registration with invite token"""
    try:
        # Validate token
        invite = await invite_token_crud.get_by_token(db, token)
        if not invite or not AuthService.is_token_valid(invite):
            await message.answer(
                "‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∞—è —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å—Ç–∞—Ä–æ—Å—Ç–µ –≥—Ä—É–ø–ø—ã –∑–∞ –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–æ–π."
            )
            return
        
        # Save invite token to state
        await state.update_data(invite_token=token)
        
        await message.answer(
            f"üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É ¬´{invite.group.name}¬ª!\n\n"
            "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):"
        )
        await state.set_state(RegistrationStates.waiting_for_name_with_invite)
        
    except Exception as e:
        logger.error(f"Error handling invite registration: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.")


async def start_registration(message: types.Message, state: FSMContext):
    """Start regular registration process"""
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–º–∏ –≥—Ä—É–ø–ø–∞–º–∏!\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):"
    )
    await state.set_state(RegistrationStates.waiting_for_name)


@router.message(StateFilter(RegistrationStates.waiting_for_name))
async def process_name(message: types.Message, state: FSMContext):
    """Process user's full name during registration"""
    try:
        full_name = message.text.strip()
        
        if len(full_name) < 5 or len(full_name.split()) < 2:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è):"
            )
            return
        
        # Save name to state
        await state.update_data(full_name=full_name)
        
        # Show available groups
        async for db in get_db():
            groups_kb = await get_groups_keyboard(db)
            await message.answer(
                f"‚úÖ –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {full_name}\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:",
                reply_markup=groups_kb
            )
            await state.set_state(RegistrationStates.waiting_for_group)
            
    except Exception as e:
        logger.error(f"Error processing name: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@router.message(StateFilter(RegistrationStates.waiting_for_name_with_invite))
async def process_name_with_invite(message: types.Message, state: FSMContext):
    """Process user's full name during invite registration"""
    try:
        full_name = message.text.strip()
        
        if len(full_name) < 5 or len(full_name.split()) < 2:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è):"
            )
            return
        
        # Get data from state
        data = await state.get_data()
        invite_token = data.get('invite_token')
        
        async for db in get_db():
            # Validate token again
            invite = await invite_token_crud.get_by_token(db, invite_token)
            if not invite or not AuthService.is_token_valid(invite):
                await message.answer("‚ùå –°—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –±–æ–ª–µ–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.")
                await state.clear()
                return
            
            # Create user with group
            user = await user_crud.create_user(
                db,
                telegram_id=message.from_user.id,
                full_name=full_name,
                username=message.from_user.username,
                group_id=invite.group_id
            )
            
            # Use the invite token
            await invite_token_crud.use_token(db, invite_token)
            
            # Notify group leader
            await notify_group_leader(db, user, invite.group)
            
            await message.answer(
                f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                f"–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É ¬´{invite.group.name}¬ª.\n\n"
                f"–°—Ç–∞—Ä–æ—Å—Ç–∞ –≥—Ä—É–ø–ø—ã –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞—à–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏.",
                reply_markup=get_main_menu_keyboard(UserRole.MEMBER)
            )
            
            await state.clear()
            
    except Exception as e:
        logger.error(f"Error processing name with invite: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        await state.clear()


@router.callback_query(F.data.startswith("select_group:"))
async def select_group(callback: types.CallbackQuery, state: FSMContext):
    """Handle group selection"""
    try:
        group_id = callback.data.split(":")[1]
        data = await state.get_data()
        full_name = data.get('full_name')
        
        if not full_name:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –∏–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
        
        async for db in get_db():
            group = await group_crud.get_by_id(db, group_id)
            if not group:
                await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            # Show confirmation
            await callback.message.edit_text(
                f"üìö –í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É: {group.name}\n\n"
                f"–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Ç–∞—Ä–æ—Å—Ç–∞ –≥—Ä—É–ø–ø—ã –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ "
                f"–æ –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.",
                reply_markup=get_confirmation_keyboard(group_id)
            )
            
            await state.update_data(group_id=group_id)
            await state.set_state(RegistrationStates.waiting_for_confirmation)
            
    except Exception as e:
        logger.error(f"Error selecting group: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.callback_query(F.data.startswith("confirm_group:"))
async def confirm_group(callback: types.CallbackQuery, state: FSMContext):
    """Confirm group selection and complete registration"""
    try:
        group_id = callback.data.split(":")[1]
        data = await state.get_data()
        full_name = data.get('full_name')
        
        async for db in get_db():
            # Create user without group (pending approval)
            user = await user_crud.create_user(
                db,
                telegram_id=callback.from_user.id,
                full_name=full_name,
                username=callback.from_user.username
            )
            
            group = await group_crud.get_by_id(db, group_id)
            
            # Notify group leader about join request
            await notify_group_leader_about_request(db, user, group)
            
            await callback.message.edit_text(
                f"‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n"
                f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –≥—Ä—É–ø–ø–µ ¬´{group.name}¬ª "
                f"–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ä–æ—Å—Ç–µ. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
            )
            
            await state.clear()
            
    except Exception as e:
        logger.error(f"Error confirming group: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.callback_query(F.data == "cancel_registration")
async def cancel_registration(callback: types.CallbackQuery, state: FSMContext):
    """Cancel registration process"""
    await callback.message.edit_text("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()


@router.message(Command("admin_login"))
async def admin_login(message: types.Message):
    """Handle admin login with code"""
    try:
        args = message.text.split()
        if len(args) != 2:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_login <–∫–æ–¥>"
            )
            return
        
        admin_code = args[1]
        
        if not AuthService.verify_admin_code(admin_code):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        async for db in get_db():
            user = await user_crud.get_by_telegram_id(db, message.from_user.id)
            
            if not user:
                await message.answer(
                    "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                    "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
                )
                return
            
            # Update user role to admin
            await user_crud.update_role(db, user.id, UserRole.ADMIN)
            
            await message.answer(
                "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
                reply_markup=get_main_menu_keyboard(UserRole.ADMIN)
            )
            
            logger.info(f"User {user.full_name} ({user.telegram_id}) became admin")
            
    except Exception as e:
        logger.error(f"Error in admin login: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")


async def notify_group_leader(db, user, group):
    """Notify group leader about new member"""
    try:
        from app.services.notification_service import NotificationService
        
        leader = await user_crud.get_by_id(db, group.leader_id)
        if leader:
            notification_service = NotificationService()
            await notification_service.send_immediate_notification(
                leader.telegram_id,
                "üë• –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫",
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥—Ä—É–ø–ø–µ ¬´{group.name}¬ª "
                f"–ø–æ —Å—Å—ã–ª–∫–µ-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é."
            )
    except Exception as e:
        logger.error(f"Error notifying group leader: {e}")


async def notify_group_leader_about_request(db, user, group):
    """Notify group leader about join request"""
    try:
        from app.services.notification_service import NotificationService
        
        leader = await user_crud.get_by_id(db, group.leader_id)
        if leader:
            notification_service = NotificationService()
            await notification_service.send_immediate_notification(
                leader.telegram_id,
                "üì® –ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} (@{user.username or '–±–µ–∑ username'}) "
                f"—Ö–æ—á–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ ¬´{group.name}¬ª.\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–π –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏."
            )
    except Exception as e:
        logger.error(f"Error notifying about join request: {e}")


@router.message(Command("whoami"))
@require_auth
async def whoami(message: types.Message, user):
    """Show current user info"""
    group_info = f"–ì—Ä—É–ø–ø–∞: {user.group.name}" if user.group else "–ì—Ä—É–ø–ø–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    role_names = {
        UserRole.ADMIN: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        UserRole.GROUP_LEADER: "–°—Ç–∞—Ä–æ—Å—Ç–∞",
        UserRole.ASSISTANT: "–ü–æ–º–æ—â–Ω–∏–∫ —Å—Ç–∞—Ä–æ—Å—Ç—ã",
        UserRole.MEMBER: "–£—á–∞—Å—Ç–Ω–∏–∫"
    }
    
    await message.answer(
        f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:\n\n"
        f"–ò–º—è: {user.full_name}\n"
        f"–†–æ–ª—å: {role_names.get(user.role, user.role)}\n"
        f"{group_info}\n"
        f"Telegram ID: {user.telegram_id}"
    )
