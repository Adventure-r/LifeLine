"""
Event management handlers
"""

from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from loguru import logger
from datetime import datetime, date, timedelta

from app.database.database import get_db
from app.database.crud import event_crud, user_crud, notification_crud
from app.database.models import UserRole, EventType, NotificationType
from app.keyboards.inline import (
    get_events_keyboard, get_event_actions_keyboard, 
    get_event_type_keyboard, get_event_details_keyboard,
    get_events_filter_keyboard
)
from app.keyboards.reply import get_main_menu_keyboard
from app.utils.decorators import require_role, require_auth
from app.states.states import EventStates
from app.services.notification_service import NotificationService

router = Router()


@router.message(F.text == "üìÖ –°–æ–±—ã—Ç–∏—è")
@require_auth
async def show_events(message: types.Message, user):
    """Show events for user's group"""
    if not user.group_id:
        await message.answer("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ.")
        return
    
    try:
        async for db in get_db():
            events = await event_crud.get_group_events(db, user.group_id, limit=10)
            
            if not events:
                await message.answer(
                    "üìÖ –í –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π.",
                    reply_markup=get_events_keyboard(user.role, has_events=False)
                )
                return
            
            # Show recent events
            events_text = f"üìÖ –°–æ–±—ã—Ç–∏—è –≥—Ä—É–ø–ø—ã ¬´{user.group.name}¬ª:\n\n"
            
            for event in events:
                event_emoji = get_event_emoji(event.event_type)
                date_str = event.event_date.strftime("%d.%m.%Y") if event.event_date else "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                
                events_text += f"{event_emoji} {event.title}\n"
                events_text += f"üìÖ {date_str}"
                
                if event.start_time:
                    events_text += f" –≤ {event.start_time}"
                
                if event.is_important:
                    events_text += " ‚≠ê"
                
                events_text += "\n\n"
            
            await message.answer(
                events_text,
                reply_markup=get_events_keyboard(user.role, has_events=True)
            )
            
    except Exception as e:
        logger.error(f"Error showing events: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–±—ã—Ç–∏–π.")


@router.callback_query(F.data == "view_all_events")
@require_auth
async def view_all_events(callback: types.CallbackQuery, user):
    """View all events with pagination"""
    try:
        async for db in get_db():
            events = await event_crud.get_group_events(db, user.group_id, limit=20)
            
            if not events:
                await callback.message.edit_text("üìÖ –í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π.")
                return
            
            events_text = f"üìÖ –í—Å–µ —Å–æ–±—ã—Ç–∏—è ({len(events)}):\n\n"
            
            for i, event in enumerate(events, 1):
                event_emoji = get_event_emoji(event.event_type)
                date_str = event.event_date.strftime("%d.%m") if event.event_date else "–ë–µ–∑ –¥–∞—Ç—ã"
                
                events_text += f"{i}. {event_emoji} {event.title}\n"
                events_text += f"   üìÖ {date_str}"
                
                if event.start_time:
                    events_text += f" –≤ {event.start_time}"
                
                if event.is_important:
                    events_text += " ‚≠ê"
                
                events_text += "\n"
            
            await callback.message.edit_text(
                events_text,
                reply_markup=get_events_filter_keyboard()
            )
            
    except Exception as e:
        logger.error(f"Error viewing all events: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.callback_query(F.data == "upcoming_events")
@require_auth
async def view_upcoming_events(callback: types.CallbackQuery, user):
    """View upcoming events"""
    try:
        async for db in get_db():
            events = await event_crud.get_upcoming_events(db, user.group_id)
            
            if not events:
                await callback.message.edit_text(
                    "üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç.",
                    reply_markup=get_events_filter_keyboard()
                )
                return
            
            events_text = "üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è:\n\n"
            
            for event in events:
                event_emoji = get_event_emoji(event.event_type)
                
                if event.event_date:
                    date_str = event.event_date.strftime("%d.%m.%Y")
                    days_left = (event.event_date - date.today()).days
                    
                    if days_left == 0:
                        date_info = f"{date_str} (—Å–µ–≥–æ–¥–Ω—è)"
                    elif days_left == 1:
                        date_info = f"{date_str} (–∑–∞–≤—Ç—Ä–∞)"
                    elif days_left > 0:
                        date_info = f"{date_str} (—á–µ—Ä–µ–∑ {days_left} –¥–Ω.)"
                    else:
                        continue  # Skip past events
                        
                elif event.deadline_end:
                    deadline_str = event.deadline_end.strftime("%d.%m.%Y %H:%M")
                    hours_left = (event.deadline_end - datetime.now()).total_seconds() / 3600
                    
                    if hours_left > 24:
                        days_left = int(hours_left / 24)
                        date_info = f"–¥–æ {deadline_str} (—á–µ—Ä–µ–∑ {days_left} –¥–Ω.)"
                    elif hours_left > 0:
                        date_info = f"–¥–æ {deadline_str} (—á–µ—Ä–µ–∑ {int(hours_left)} —á.)"
                    else:
                        continue
                else:
                    date_info = "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                
                events_text += f"{event_emoji} {event.title}\n"
                events_text += f"üìÖ {date_info}"
                
                if event.start_time:
                    events_text += f" –≤ {event.start_time}"
                
                if event.is_important:
                    events_text += " ‚≠ê"
                
                events_text += "\n\n"
            
            await callback.message.edit_text(
                events_text,
                reply_markup=get_events_filter_keyboard()
            )
            
    except Exception as e:
        logger.error(f"Error viewing upcoming events: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ")
@require_role(UserRole.GROUP_LEADER, UserRole.ASSISTANT)
async def create_event_start(message: types.Message, state: FSMContext, user):
    """Start event creation"""
    if not user.group_id:
        await message.answer("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ.")
        return
    
    await message.answer(
        "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(EventStates.waiting_for_title)


@router.message(EventStates.waiting_for_title)
@require_role(UserRole.GROUP_LEADER, UserRole.ASSISTANT)
async def process_event_title(message: types.Message, state: FSMContext, user):
    """Process event title"""
    try:
        title = message.text.strip()
        
        if len(title) < 3:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
            return
        
        if len(title) > 255:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 255 —Å–∏–º–≤–æ–ª–æ–≤).")
            return
        
        await state.update_data(title=title)
        
        await message.answer(
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è:",
            reply_markup=get_event_type_keyboard()
        )
        await state.set_state(EventStates.waiting_for_type)
        
    except Exception as e:
        logger.error(f"Error processing event title: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.callback_query(F.data.startswith("event_type:"))
async def process_event_type(callback: types.CallbackQuery, state: FSMContext):
    """Process event type selection"""
    try:
        event_type = callback.data.split(":")[1]
        await state.update_data(event_type=event_type)
        
        type_names = {
            "lecture": "–õ–µ–∫—Ü–∏—è",
            "seminar": "–°–µ–º–∏–Ω–∞—Ä", 
            "lab": "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
            "exam": "–≠–∫–∑–∞–º–µ–Ω",
            "deadline": "–î–µ–¥–ª–∞–π–Ω",
            "meeting": "–°–æ–±—Ä–∞–Ω–∏–µ",
            "other": "–î—Ä—É–≥–æ–µ"
        }
        
        await callback.message.edit_text(
            f"‚úÖ –¢–∏–ø —Å–æ–±—ã—Ç–∏—è: {type_names.get(event_type, event_type)}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"
        )
        await state.set_state(EventStates.waiting_for_description)
        
    except Exception as e:
        logger.error(f"Error processing event type: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.message(EventStates.waiting_for_description)
@require_role(UserRole.GROUP_LEADER, UserRole.ASSISTANT)
async def process_event_description(message: types.Message, state: FSMContext, user):
    """Process event description"""
    try:
        description = None
        if message.text.strip() != "/skip":
            description = message.text.strip()
            if len(description) > 1000:
                await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤).")
                return
        
        await state.update_data(description=description)
        
        data = await state.get_data()
        event_type = data.get('event_type')
        
        if event_type == "deadline":
            await message.answer(
                "üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–∞:\n\n"
                "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 23:59"
            )
            await state.set_state(EventStates.waiting_for_deadline)
        else:
            await message.answer(
                "üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è:\n\n"
                "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024\n"
                "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞"
            )
            await state.set_state(EventStates.waiting_for_date)
        
    except Exception as e:
        logger.error(f"Error processing event description: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.message(EventStates.waiting_for_deadline)
@require_role(UserRole.GROUP_LEADER, UserRole.ASSISTANT)
async def process_deadline_date(message: types.Message, state: FSMContext, user):
    """Process deadline date and time"""
    try:
        date_str = message.text.strip()
        
        try:
            deadline_end = datetime.strptime(date_str, "%d.%m.%Y %H:%M")
            
            if deadline_end <= datetime.now():
                await message.answer("‚ùå –î–µ–¥–ª–∞–π–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.")
                return
                
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú"
            )
            return
        
        await state.update_data(deadline_end=deadline_end)
        
        await message.answer(
            "üìù –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª –∫ —Å–æ–±—ã—Ç–∏—é?\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ /skip",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_media")]
            ])
        )
        await state.set_state(EventStates.waiting_for_media)
        
    except Exception as e:
        logger.error(f"Error processing deadline date: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã.")


@router.message(EventStates.waiting_for_date)
@require_role(UserRole.GROUP_LEADER, UserRole.ASSISTANT)
async def process_event_date(message: types.Message, state: FSMContext, user):
    """Process event date"""
    try:
        event_date = None
        
        if message.text.strip() != "/skip":
            date_str = message.text.strip()
            
            try:
                event_date = datetime.strptime(date_str, "%d.%m.%Y").date()
            except ValueError:
                await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì"
                )
                return
        
        await state.update_data(event_date=event_date)
        
        if event_date:
            await message.answer(
                f"‚úÖ –î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è: {event_date.strftime('%d.%m.%Y')}\n\n"
                "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è:\n\n"
                "–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 09:30\n"
                "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞"
            )
            await state.set_state(EventStates.waiting_for_start_time)
        else:
            await message.answer(
                "üìù –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª –∫ —Å–æ–±—ã—Ç–∏—é?\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ /skip",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_media")]
                ])
            )
            await state.set_state(EventStates.waiting_for_media)
        
    except Exception as e:
        logger.error(f"Error processing event date: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã.")


@router.message(EventStates.waiting_for_start_time)
@require_role(UserRole.GROUP_LEADER, UserRole.ASSISTANT)
async def process_start_time(message: types.Message, state: FSMContext, user):
    """Process event start time"""
    try:
        start_time = None
        
        if message.text.strip() != "/skip":
            time_str = message.text.strip()
            
            try:
                # Validate time format
                datetime.strptime(time_str, "%H:%M")
                start_time = time_str
            except ValueError:
                await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú"
                )
                return
        
        await state.update_data(start_time=start_time)
        
        if start_time:
            await message.answer(
                f"‚úÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time}\n\n"
                "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:\n\n"
                "–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú\n"
                "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞"
            )
            await state.set_state(EventStates.waiting_for_end_time)
        else:
            await message.answer(
                "üìù –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª –∫ —Å–æ–±—ã—Ç–∏—é?\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ /skip",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_media")]
                ])
            )
            await state.set_state(EventStates.waiting_for_media)
        
    except Exception as e:
        logger.error(f"Error processing start time: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏.")


@router.message(EventStates.waiting_for_end_time)
@require_role(UserRole.GROUP_LEADER, UserRole.ASSISTANT)
async def process_end_time(message: types.Message, state: FSMContext, user):
    """Process event end time"""
    try:
        end_time = None
        
        if message.text.strip() != "/skip":
            time_str = message.text.strip()
            
            try:
                # Validate time format
                datetime.strptime(time_str, "%H:%M")
                end_time = time_str
                
                # Check if end time is after start time
                data = await state.get_data()
                start_time = data.get('start_time')
                
                if start_time and end_time:
                    start_dt = datetime.strptime(start_time, "%H:%M")
                    end_dt = datetime.strptime(end_time, "%H:%M")
                    
                    if end_dt <= start_dt:
                        await message.answer(
                            "‚ùå –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞."
                        )
                        return
                        
            except ValueError:
                await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú"
                )
                return
        
        await state.update_data(end_time=end_time)
        
        await message.answer(
            "üìù –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª –∫ —Å–æ–±—ã—Ç–∏—é?\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ /skip",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_media")]
            ])
        )
        await state.set_state(EventStates.waiting_for_media)
        
    except Exception as e:
        logger.error(f"Error processing end time: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏.")


@router.callback_query(F.data == "skip_media")
async def skip_media(callback: types.CallbackQuery, state: FSMContext):
    """Skip media upload"""
    await finish_event_creation(callback.message, state, callback.from_user.id)


@router.message(EventStates.waiting_for_media, F.photo)
@router.message(EventStates.waiting_for_media, F.video)
@router.message(EventStates.waiting_for_media, F.document)
@require_role(UserRole.GROUP_LEADER, UserRole.ASSISTANT)
async def process_media(message: types.Message, state: FSMContext, user):
    """Process media file"""
    try:
        media_file_id = None
        media_type = None
        
        if message.photo:
            media_file_id = message.photo[-1].file_id
            media_type = "photo"
        elif message.video:
            media_file_id = message.video.file_id
            media_type = "video"
        elif message.document:
            media_file_id = message.document.file_id
            media_type = "document"
        
        await state.update_data(
            media_file_id=media_file_id,
            media_type=media_type,
            has_media=True
        )
        
        await finish_event_creation(message, state, message.from_user.id)
        
    except Exception as e:
        logger.error(f"Error processing media: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.")


async def finish_event_creation(message: types.Message, state: FSMContext, user_id: int):
    """Finish event creation"""
    try:
        data = await state.get_data()
        
        async for db in get_db():
            user = await user_crud.get_by_telegram_id(db, user_id)
            
            # Create event
            event_data = {
                'title': data['title'],
                'description': data.get('description'),
                'event_type': EventType(data['event_type']),
                'group_id': user.group_id,
                'creator_id': user.id,
                'event_date': data.get('event_date'),
                'start_time': data.get('start_time'),
                'end_time': data.get('end_time'),
                'deadline_end': data.get('deadline_end'),
                'has_media': data.get('has_media', False),
                'media_file_id': data.get('media_file_id'),
                'media_type': data.get('media_type')
            }
            
            event = await event_crud.create_event(db, **event_data)
            
            # Send confirmation message
            confirmation_text = f"‚úÖ –°–æ–±—ã—Ç–∏–µ ¬´{event.title}¬ª —Å–æ–∑–¥–∞–Ω–æ!\n\n"
            
            if event.event_date:
                confirmation_text += f"üìÖ –î–∞—Ç–∞: {event.event_date.strftime('%d.%m.%Y')}\n"
            
            if event.start_time:
                confirmation_text += f"üïê –í—Ä–µ–º—è: {event.start_time}"
                if event.end_time:
                    confirmation_text += f" - {event.end_time}"
                confirmation_text += "\n"
            
            if event.deadline_end:
                confirmation_text += f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {event.deadline_end.strftime('%d.%m.%Y %H:%M')}\n"
            
            confirmation_text += "\nüì¢ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–±—ã—Ç–∏–∏."
            
            await message.answer(
                confirmation_text,
                reply_markup=get_main_menu_keyboard(user.role)
            )
            
            # Send notifications to group members
            await notify_group_about_event(db, event, user)
            
            logger.info(f"User {user.full_name} created event '{event.title}' in group {user.group.name}")
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error finishing event creation: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.")
        await state.clear()


async def notify_group_about_event(db, event, creator):
    """Send notifications about new event"""
    try:
        members = await user_crud.get_users_by_group(db, event.group_id)
        notification_service = NotificationService()
        
        for member in members:
            if member.id != creator.id and member.event_notifications:
                title = "üìÖ –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ"
                message = f"–í –≥—Ä—É–ø–ø–µ ¬´{event.group.name}¬ª —Å–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ:\n\n{event.title}"
                
                if event.event_date:
                    message += f"\nüìÖ {event.event_date.strftime('%d.%m.%Y')}"
                
                if event.start_time:
                    message += f" –≤ {event.start_time}"
                
                await notification_service.send_immediate_notification(
                    member.telegram_id, title, message
                )
    except Exception as e:
        logger.error(f"Error notifying group about event: {e}")


@router.callback_query(F.data.startswith("event_details:"))
@require_auth
async def show_event_details(callback: types.CallbackQuery, user):
    """Show detailed event information"""
    try:
        event_id = callback.data.split(":")[1]
        
        async for db in get_db():
            event = await event_crud.get_by_id(db, event_id)
            
            if not event or event.group_id != user.group_id:
                await callback.answer("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return
            
            # Mark as viewed
            await event_crud.mark_as_viewed(db, user.id, event.id)
            
            # Build details message
            details_text = f"üìã –î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è\n\n"
            details_text += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {event.title}\n"
            details_text += f"üè∑Ô∏è –¢–∏–ø: {get_event_type_name(event.event_type)}\n"
            
            if event.description:
                details_text += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {event.description}\n"
            
            if event.event_date:
                details_text += f"üìÖ –î–∞—Ç–∞: {event.event_date.strftime('%d.%m.%Y')}\n"
            
            if event.start_time:
                details_text += f"üïê –í—Ä–µ–º—è: {event.start_time}"
                if event.end_time:
                    details_text += f" - {event.end_time}"
                details_text += "\n"
            
            if event.deadline_end:
                details_text += f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {event.deadline_end.strftime('%d.%m.%Y %H:%M')}\n"
            
            details_text += f"üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {event.creator.full_name}\n"
            details_text += f"üìä –í–∞–∂–Ω–æ–µ: {'–î–∞' if event.is_important else '–ù–µ—Ç'}\n"
            
            keyboard = get_event_details_keyboard(event.id, user.role, event.creator_id == user.id)
            
            if event.has_media and event.media_file_id:
                # Send media first, then details
                if event.media_type == "photo":
                    await callback.bot.send_photo(
                        callback.message.chat.id,
                        event.media_file_id,
                        caption=details_text,
                        reply_markup=keyboard
                    )
                elif event.media_type == "video":
                    await callback.bot.send_video(
                        callback.message.chat.id,
                        event.media_file_id,
                        caption=details_text,
                        reply_markup=keyboard
                    )
                elif event.media_type == "document":
                    await callback.bot.send_document(
                        callback.message.chat.id,
                        event.media_file_id,
                        caption=details_text,
                        reply_markup=keyboard
                    )
                
                # Delete the original message
                await callback.message.delete()
            else:
                await callback.message.edit_text(
                    details_text,
                    reply_markup=keyboard
                )
            
    except Exception as e:
        logger.error(f"Error showing event details: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.callback_query(F.data.startswith("mark_important:"))
@require_role(UserRole.GROUP_LEADER, UserRole.ASSISTANT)
async def toggle_event_importance(callback: types.CallbackQuery, user):
    """Toggle event importance"""
    try:
        event_id = callback.data.split(":")[1]
        
        async for db in get_db():
            event = await event_crud.get_by_id(db, event_id)
            
            if not event or event.group_id != user.group_id:
                await callback.answer("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return
            
            # Toggle importance
            new_importance = not event.is_important
            await event_crud.update(db, event_id, is_important=new_importance)
            
            status = "–≤–∞–∂–Ω—ã–º" if new_importance else "–æ–±—ã—á–Ω—ã–º"
            await callback.answer(f"‚úÖ –°–æ–±—ã—Ç–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ {status}.")
            
            # Refresh the details view
            await show_event_details(callback, user)
            
    except Exception as e:
        logger.error(f"Error toggling event importance: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.callback_query(F.data.startswith("delete_event:"))
@require_role(UserRole.GROUP_LEADER, UserRole.ASSISTANT)
async def delete_event(callback: types.CallbackQuery, user):
    """Delete event"""
    try:
        event_id = callback.data.split(":")[1]
        
        async for db in get_db():
            event = await event_crud.get_by_id(db, event_id)
            
            if not event or event.group_id != user.group_id:
                await callback.answer("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return
            
            # Check permissions
            if event.creator_id != user.id and user.role != UserRole.GROUP_LEADER:
                await callback.answer("‚ùå –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å–æ–±—ã—Ç–∏—è.")
                return
            
            # Delete event
            await event_crud.update(db, event_id, is_active=False)
            
            await callback.message.edit_text(
                f"‚úÖ –°–æ–±—ã—Ç–∏–µ ¬´{event.title}¬ª —É–¥–∞–ª–µ–Ω–æ."
            )
            
            logger.info(f"User {user.full_name} deleted event '{event.title}'")
            
    except Exception as e:
        logger.error(f"Error deleting event: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


def get_event_emoji(event_type: EventType) -> str:
    """Get emoji for event type"""
    emoji_map = {
        EventType.LECTURE: "üìö",
        EventType.SEMINAR: "üí¨",
        EventType.LAB: "üî¨",
        EventType.EXAM: "üìù",
        EventType.DEADLINE: "‚è∞",
        EventType.MEETING: "üë•",
        EventType.OTHER: "üìå"
    }
    return emoji_map.get(event_type, "üìå")


def get_event_type_name(event_type: EventType) -> str:
    """Get human-readable event type name"""
    type_names = {
        EventType.LECTURE: "–õ–µ–∫—Ü–∏—è",
        EventType.SEMINAR: "–°–µ–º–∏–Ω–∞—Ä",
        EventType.LAB: "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
        EventType.EXAM: "–≠–∫–∑–∞–º–µ–Ω",
        EventType.DEADLINE: "–î–µ–¥–ª–∞–π–Ω",
        EventType.MEETING: "–°–æ–±—Ä–∞–Ω–∏–µ",
        EventType.OTHER: "–î—Ä—É–≥–æ–µ"
    }
    return type_names.get(event_type, str(event_type))
