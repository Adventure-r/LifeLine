"""
Admin panel handlers
"""

from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from loguru import logger

from app.database.database import get_db
from app.database.crud import user_crud, group_crud, event_crud
from app.database.models import UserRole
from app.keyboards.inline import (
    get_admin_main_keyboard, get_admin_users_keyboard, 
    get_admin_groups_keyboard, get_user_management_keyboard
)
from app.utils.decorators import require_role
from app.states.states import AdminStates

router = Router()


@router.message(Command("admin"))
@require_role(UserRole.ADMIN)
async def admin_panel(message: types.Message, user):
    """Show admin panel"""
    await message.answer(
        "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=get_admin_main_keyboard()
    )


@router.callback_query(F.data == "admin_users")
@require_role(UserRole.ADMIN)
async def admin_users(callback: types.CallbackQuery, user):
    """Show users management"""
    try:
        async for db in get_db():
            # Get statistics
            all_users = await user_crud.get_all_users(db)
            admins_count = len([u for u in all_users if u.role == UserRole.ADMIN])
            leaders_count = len([u for u in all_users if u.role == UserRole.GROUP_LEADER])
            members_count = len([u for u in all_users if u.role == UserRole.MEMBER])
            
            stats_text = (
                f"üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_users)}\n"
                f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {admins_count}\n"
                f"–°—Ç–∞—Ä–æ—Å—Ç—ã: {leaders_count}\n"
                f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {members_count}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            
            await callback.message.edit_text(
                stats_text,
                reply_markup=get_admin_users_keyboard()
            )
            
    except Exception as e:
        logger.error(f"Error in admin_users: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.callback_query(F.data == "admin_groups")
@require_role(UserRole.ADMIN)
async def admin_groups(callback: types.CallbackQuery, user):
    """Show groups management"""
    try:
        async for db in get_db():
            groups = await group_crud.get_all_active(db)
            
            groups_text = f"üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏\n\n"
            groups_text += f"–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø: {len(groups)}\n\n"
            
            if groups:
                groups_text += "–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø:\n"
                for group in groups[:10]:  # Show first 10 groups
                    member_count = len(group.members) if hasattr(group, 'members') else 0
                    groups_text += f"‚Ä¢ {group.name} ({member_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)\n"
                
                if len(groups) > 10:
                    groups_text += f"... –∏ –µ—â—ë {len(groups) - 10} –≥—Ä—É–ø–ø\n"
            
            await callback.message.edit_text(
                groups_text,
                reply_markup=get_admin_groups_keyboard()
            )
            
    except Exception as e:
        logger.error(f"Error in admin_groups: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.callback_query(F.data == "admin_stats")
@require_role(UserRole.ADMIN)
async def admin_stats(callback: types.CallbackQuery, user):
    """Show system statistics"""
    try:
        async for db in get_db():
            # Gather statistics
            users = await user_crud.get_all_users(db)
            groups = await group_crud.get_all_active(db)
            
            # Count events from last 30 days
            from datetime import datetime, timedelta
            recent_events = []
            for group in groups:
                group_events = await event_crud.get_group_events(db, group.id, limit=100)
                recent_events.extend([
                    e for e in group_events 
                    if e.created_at > datetime.now() - timedelta(days=30)
                ])
            
            stats_text = (
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n\n"
                f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(users)}\n"
                f"üìö –ê–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã: {len(groups)}\n"
                f"üìÖ –°–æ–±—ã—Ç–∏—è –∑–∞ –º–µ—Å—è—Ü: {len(recent_events)}\n\n"
                f"üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π:\n"
                f"‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {len([u for u in users if u.role == UserRole.ADMIN])}\n"
                f"‚Ä¢ –°—Ç–∞—Ä–æ—Å—Ç—ã: {len([u for u in users if u.role == UserRole.GROUP_LEADER])}\n"
                f"‚Ä¢ –ü–æ–º–æ—â–Ω–∏–∫–∏: {len([u for u in users if u.role == UserRole.ASSISTANT])}\n"
                f"‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–∏: {len([u for u in users if u.role == UserRole.MEMBER])}\n\n"
            )
            
            # Top groups by member count
            groups_with_members = []
            for group in groups:
                member_count = await user_crud.get_group_member_count(db, group.id)
                groups_with_members.append((group, member_count))
            
            groups_with_members.sort(key=lambda x: x[1], reverse=True)
            
            if groups_with_members:
                stats_text += "üèÜ –°–∞–º—ã–µ –±–æ–ª—å—à–∏–µ –≥—Ä—É–ø–ø—ã:\n"
                for group, count in groups_with_members[:5]:
                    stats_text += f"‚Ä¢ {group.name}: {count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            
            await callback.message.edit_text(
                stats_text,
                reply_markup=get_admin_main_keyboard()
            )
            
    except Exception as e:
        logger.error(f"Error in admin_stats: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.callback_query(F.data == "admin_search_user")
@require_role(UserRole.ADMIN)
async def admin_search_user(callback: types.CallbackQuery, state: FSMContext, user):
    """Start user search"""
    await callback.message.edit_text(
        "üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –µ–≥–æ Telegram ID –¥–ª—è –ø–æ–∏—Å–∫–∞:"
    )
    await state.set_state(AdminStates.searching_user)


@router.message(AdminStates.searching_user)
@require_role(UserRole.ADMIN)
async def process_user_search(message: types.Message, state: FSMContext, user):
    """Process user search query"""
    try:
        search_query = message.text.strip()
        
        async for db in get_db():
            found_users = []
            
            # Search by Telegram ID if query is numeric
            if search_query.isdigit():
                user_by_id = await user_crud.get_by_telegram_id(db, int(search_query))
                if user_by_id:
                    found_users.append(user_by_id)
            
            # Search by name
            all_users = await user_crud.get_all_users(db)
            name_matches = [
                u for u in all_users 
                if search_query.lower() in u.full_name.lower()
            ]
            
            # Combine results and remove duplicates
            for u in name_matches:
                if u not in found_users:
                    found_users.append(u)
            
            if not found_users:
                await message.answer(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø–∞–Ω–µ–ª—å."
                )
                await state.clear()
                return
            
            # Show results
            if len(found_users) == 1:
                found_user = found_users[0]
                await show_user_details(message, found_user, db)
            else:
                results_text = f"üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(found_users)}\n\n"
                for i, u in enumerate(found_users[:10], 1):
                    group_name = u.group.name if u.group else "–ë–µ–∑ –≥—Ä—É–ø–ø—ã"
                    results_text += (
                        f"{i}. {u.full_name}\n"
                        f"   ID: {u.telegram_id}\n"
                        f"   –ì—Ä—É–ø–ø–∞: {group_name}\n"
                        f"   –†–æ–ª—å: {u.role.value}\n\n"
                    )
                
                if len(found_users) > 10:
                    results_text += f"... –∏ –µ—â—ë {len(found_users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                
                await message.answer(results_text)
            
            await state.clear()
            
    except Exception as e:
        logger.error(f"Error in user search: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")
        await state.clear()


async def show_user_details(message: types.Message, target_user, db):
    """Show detailed user information"""
    try:
        group_info = target_user.group.name if target_user.group else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        
        role_names = {
            UserRole.ADMIN: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            UserRole.GROUP_LEADER: "–°—Ç–∞—Ä–æ—Å—Ç–∞",
            UserRole.ASSISTANT: "–ü–æ–º–æ—â–Ω–∏–∫ —Å—Ç–∞—Ä–æ—Å—Ç—ã",
            UserRole.MEMBER: "–£—á–∞—Å—Ç–Ω–∏–∫"
        }
        
        details_text = (
            f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n\n"
            f"–ò–º—è: {target_user.full_name}\n"
            f"Username: @{target_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"Telegram ID: {target_user.telegram_id}\n"
            f"–†–æ–ª—å: {role_names.get(target_user.role, target_user.role.value)}\n"
            f"–ì—Ä—É–ø–ø–∞: {group_info}\n"
            f"–ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if target_user.is_active else '–ù–µ—Ç'}\n"
            f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {target_user.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n"
            f"‚Ä¢ –í–∫–ª—é—á–µ–Ω—ã: {'–î–∞' if target_user.notifications_enabled else '–ù–µ—Ç'}\n"
            f"‚Ä¢ –û —Å–æ–±—ã—Ç–∏—è—Ö: {'–î–∞' if target_user.event_notifications else '–ù–µ—Ç'}\n"
            f"‚Ä¢ –û –¥–µ–¥–ª–∞–π–Ω–∞—Ö: {'–î–∞' if target_user.deadline_reminders else '–ù–µ—Ç'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {target_user.notification_time or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}"
        )
        
        # Get user management keyboard
        keyboard = get_user_management_keyboard(target_user.id)
        
        await message.answer(details_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error showing user details: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")


@router.callback_query(F.data.startswith("admin_change_role:"))
@require_role(UserRole.ADMIN)
async def admin_change_role(callback: types.CallbackQuery, user):
    """Change user role"""
    try:
        user_id, new_role = callback.data.split(":")[1], callback.data.split(":")[2]
        
        async for db in get_db():
            target_user = await user_crud.get_by_id(db, user_id)
            if not target_user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # Update role
            await user_crud.update_role(db, user_id, UserRole(new_role))
            
            role_names = {
                UserRole.ADMIN: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                UserRole.GROUP_LEADER: "–°—Ç–∞—Ä–æ—Å—Ç–∞", 
                UserRole.ASSISTANT: "–ü–æ–º–æ—â–Ω–∏–∫ —Å—Ç–∞—Ä–æ—Å—Ç—ã",
                UserRole.MEMBER: "–£—á–∞—Å—Ç–Ω–∏–∫"
            }
            
            await callback.message.edit_text(
                f"‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user.full_name} "
                f"–∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ¬´{role_names.get(UserRole(new_role), new_role)}¬ª"
            )
            
            logger.info(f"Admin {user.full_name} changed role of {target_user.full_name} to {new_role}")
            
    except Exception as e:
        logger.error(f"Error changing user role: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.callback_query(F.data.startswith("admin_toggle_user:"))
@require_role(UserRole.ADMIN)
async def admin_toggle_user(callback: types.CallbackQuery, user):
    """Toggle user active status"""
    try:
        user_id = callback.data.split(":")[1]
        
        async for db in get_db():
            target_user = await user_crud.get_by_id(db, user_id)
            if not target_user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # Toggle active status
            new_status = not target_user.is_active
            await user_crud.update(db, user_id, is_active=new_status)
            
            status_text = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if new_status else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
            
            await callback.message.edit_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user.full_name} {status_text}"
            )
            
            logger.info(f"Admin {user.full_name} {'activated' if new_status else 'deactivated'} {target_user.full_name}")
            
    except Exception as e:
        logger.error(f"Error toggling user status: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.callback_query(F.data == "admin_broadcast")
@require_role(UserRole.ADMIN)
async def admin_broadcast(callback: types.CallbackQuery, state: FSMContext, user):
    """Start broadcast message creation"""
    await callback.message.edit_text(
        "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n\n"
        "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–∏—Å—Ç–µ–º—ã!"
    )
    await state.set_state(AdminStates.creating_broadcast)


@router.message(AdminStates.creating_broadcast)
@require_role(UserRole.ADMIN)
async def process_broadcast(message: types.Message, state: FSMContext, user):
    """Process and send broadcast message"""
    try:
        broadcast_text = message.text.strip()
        
        if len(broadcast_text) < 10:
            await message.answer(
                "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤."
            )
            return
        
        async for db in get_db():
            # Get all active users
            all_users = await user_crud.get_all_users(db)
            active_users = [u for u in all_users if u.is_active and u.notifications_enabled]
            
            # Send confirmation
            await message.answer(
                f"üì¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
                f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n{broadcast_text}\n\n"
                f"–ü–æ–ª—É—á–∞—Ç–µ–ª–∏: {len(active_users)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
                f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [
                        types.InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_broadcast"),
                        types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")
                    ]
                ])
            )
            
            # Save broadcast data to state
            await state.update_data(
                broadcast_text=broadcast_text,
                recipient_count=len(active_users)
            )
            
    except Exception as e:
        logger.error(f"Error processing broadcast: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏.")
        await state.clear()


@router.callback_query(F.data == "confirm_broadcast")
@require_role(UserRole.ADMIN)
async def confirm_broadcast(callback: types.CallbackQuery, state: FSMContext, user):
    """Confirm and send broadcast"""
    try:
        data = await state.get_data()
        broadcast_text = data.get('broadcast_text')
        
        if not broadcast_text:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return
        
        await callback.message.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏...")
        
        async for db in get_db():
            from app.services.notification_service import NotificationService
            notification_service = NotificationService()
            
            # Get all active users
            all_users = await user_crud.get_all_users(db)
            active_users = [u for u in all_users if u.is_active and u.notifications_enabled]
            
            # Send to all users
            sent_count = 0
            failed_count = 0
            
            for target_user in active_users:
                try:
                    await notification_service.send_immediate_notification(
                        target_user.telegram_id,
                        "üì¢ –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                        f"{broadcast_text}\n\nüë§ –û—Ç: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è"
                    )
                    sent_count += 1
                except Exception as e:
                    logger.error(f"Failed to send broadcast to {target_user.telegram_id}: {e}")
                    failed_count += 1
            
            result_text = (
                f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                f"–û—à–∏–±–æ–∫: {failed_count}\n"
                f"–í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(active_users)}"
            )
            
            await callback.message.edit_text(result_text)
            
            logger.info(f"Admin {user.full_name} sent broadcast to {sent_count} users")
            
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error sending broadcast: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏.")
        await state.clear()


@router.callback_query(F.data == "cancel_broadcast")
async def cancel_broadcast(callback: types.CallbackQuery, state: FSMContext):
    """Cancel broadcast"""
    await callback.message.edit_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()


@router.callback_query(F.data == "admin_back")
async def admin_back(callback: types.CallbackQuery):
    """Go back to admin main menu"""
    await callback.message.edit_text(
        "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=get_admin_main_keyboard()
    )
