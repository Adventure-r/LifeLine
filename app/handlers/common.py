"""
Common handlers for basic bot commands
"""

from aiogram import Router, F, types
from aiogram.filters import Command
from loguru import logger

from app.database.database import get_db
from app.database.crud import user_crud
from app.database.models import UserRole
from app.keyboards.reply import get_main_menu_keyboard
from app.utils.decorators import require_auth

router = Router()


@router.message(Command("help"))
async def help_command(message: types.Message):
    """
    Show help information
    """
    help_text = """
ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–º–∏ –≥—Ä—É–ø–ø–∞–º–∏

üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/whoami - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

üë• –î–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:
‚Ä¢ üìÖ –°–æ–±—ã—Ç–∏—è - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π –≥—Ä—É–ø–ø—ã
‚Ä¢ üìö –í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É - –í—ã–±–æ—Ä —Ç–µ–º—ã –¥–ª—è –∑–∞–Ω—è—Ç–∏–π
‚Ä¢ üèÉ‚Äç‚ôÇÔ∏è –û—á–µ—Ä–µ–¥—å –Ω–∞ –∑–∞—â–∏—Ç—É - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –æ—á–µ—Ä–µ–¥—è–º
‚Ä¢ üìã –ö–∞–ª–µ–Ω–¥–∞—Ä—å - –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π
‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è

üëë –î–ª—è —Å—Ç–∞—Ä–æ—Å—Ç –∏ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤:
‚Ä¢ ‚ûï –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
‚Ä¢ üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
‚Ä¢ üìö –¢–µ–º—ã –∑–∞–Ω—è—Ç–∏–π - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–∞–º–∏
‚Ä¢ üèÉ‚Äç‚ôÇÔ∏è –û—á–µ—Ä–µ–¥–∏ - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—è–º–∏
‚Ä¢ üîó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å (/invite) - –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π

üîß –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:
/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
/admin_login <–∫–æ–¥> - –í—Ö–æ–¥ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä

üí° –°–æ–≤–µ—Ç—ã:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
‚Ä¢ –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Å—Ç–∞—Ä–æ—Å—Ç–µ –≥—Ä—É–ø–ø—ã –∑–∞ –ø–æ–º–æ—â—å—é

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞
    """
    
    await message.answer(help_text)


@router.message(Command("about"))
async def about_command(message: types.Message):
    """
    Show information about the bot
    """
    about_text = """
ü§ñ Telegram Bot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–º–∏ –≥—Ä—É–ø–ø–∞–º–∏

üìå –í–µ—Ä—Å–∏—è: 1.0.0
üîß –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: Python, aiogram 3.13.1, PostgreSQL, Redis
‚ö° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ –¥–µ–¥–ª–∞–π–Ω–∞–º–∏
‚Ä¢ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ –í—ã–±–æ—Ä —Ç–µ–º –∑–∞–Ω—è—Ç–∏–π
‚Ä¢ –û—á–µ—Ä–µ–¥–∏ –Ω–∞ –∑–∞—â–∏—Ç—É –ø—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—ã

üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    """
    
    await message.answer(about_text)


@router.message(Command("stats"))
@require_auth
async def stats_command(message: types.Message, user):
    """
    Show user statistics
    """
    try:
        async for db in get_db():
            # Get user statistics
            stats_text = f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            stats_text += f"üë§ –ò–º—è: {user.full_name}\n"
            
            if user.group:
                stats_text += f"üìö –ì—Ä—É–ø–ø–∞: {user.group.name}\n"
                
                # Get group statistics
                from app.database.crud import event_crud, topic_crud, queue_crud
                
                events = await event_crud.get_group_events(db, user.group_id, limit=100)
                topics = await topic_crud.get_group_topics(db, user.group_id)
                queues = await queue_crud.get_group_queues(db, user.group_id)
                
                stats_text += f"üìÖ –°–æ–±—ã—Ç–∏—è –≤ –≥—Ä—É–ø–ø–µ: {len(events)}\n"
                stats_text += f"üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã: {len(topics)}\n"
                stats_text += f"üèÉ‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏: {len(queues)}\n\n"
                
                # User-specific stats
                user_with_topics = await user_crud.get_by_id(db, user.id)
                selected_topics = len(user_with_topics.selected_topics)
                
                stats_text += f"üìù –í—ã–±—Ä–∞–Ω–æ —Ç–µ–º: {selected_topics}\n"
                
                # Count user's queue entries
                user_entries = []
                for queue in queues:
                    for entry in queue.entries:
                        if entry.user_id == user.id:
                            user_entries.append(entry)
                
                stats_text += f"üèÉ‚Äç‚ôÇÔ∏è –£—á–∞—Å—Ç–∏–µ –≤ –æ—á–µ—Ä–µ–¥—è—Ö: {len(user_entries)}\n"
                
                # Registration date
                reg_date = user.created_at.strftime("%d.%m.%Y")
                stats_text += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {reg_date}\n"
            else:
                stats_text += "üìö –ì—Ä—É–ø–ø–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞\n"
            
            await message.answer(stats_text)
            
    except Exception as e:
        logger.error(f"Error showing user stats: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


@router.message(Command("menu"))
@require_auth
async def menu_command(message: types.Message, user):
    """
    Show main menu
    """
    await message.answer(
        "üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_menu_keyboard(user.role)
    )


@router.message(F.text == "üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
@require_auth
async def main_menu_button(message: types.Message, user):
    """
    Handle main menu button
    """
    welcome_text = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.full_name}!\n\n"
    
    if user.group:
        welcome_text += f"üìö –í–∞—à–∞ –≥—Ä—É–ø–ø–∞: {user.group.name}\n"
    else:
        welcome_text += "üìö –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ\n"
    
    role_names = {
        UserRole.ADMIN: "üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        UserRole.GROUP_LEADER: "üëë –°—Ç–∞—Ä–æ—Å—Ç–∞ –≥—Ä—É–ø–ø—ã",
        UserRole.ASSISTANT: "ü§ù –ü–æ–º–æ—â–Ω–∏–∫ —Å—Ç–∞—Ä–æ—Å—Ç—ã",
        UserRole.MEMBER: "üë§ –£—á–∞—Å—Ç–Ω–∏–∫"
    }
    
    welcome_text += f"üëë –†–æ–ª—å: {role_names.get(user.role, user.role.value)}\n\n"
    welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    
    await message.answer(
        welcome_text,
        reply_markup=get_main_menu_keyboard(user.role)
    )


@router.message(F.text.in_(["‚ùì –ü–æ–º–æ—â—å", "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]))
async def help_button(message: types.Message):
    """
    Handle help button
    """
    await help_command(message)


@router.message()
async def unknown_message(message: types.Message):
    """
    Handle unknown messages
    """
    # Check if user is authenticated
    try:
        async for db in get_db():
            user = await user_crud.get_by_telegram_id(db, message.from_user.id)
            
            if not user:
                await message.answer(
                    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–º–∏ –≥—Ä—É–ø–ø–∞–º–∏.\n\n"
                    "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
                )
                return
            
            # User is authenticated but sent unknown command
            await message.answer(
                "‚ùì –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.",
                reply_markup=get_main_menu_keyboard(user.role)
            )
            
    except Exception as e:
        logger.error(f"Error handling unknown message: {e}")
        await message.answer(
            "‚ùì –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
        )


@router.callback_query(F.data == "close")
async def close_message(callback: types.CallbackQuery):
    """
    Close inline message
    """
    await callback.message.delete()


@router.callback_query()
async def unknown_callback(callback: types.CallbackQuery):
    """
    Handle unknown callback queries
    """
    await callback.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
    logger.warning(f"Unknown callback data: {callback.data}")
